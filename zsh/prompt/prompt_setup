#!/usr/bin/zsh

# Prompt by Iago Tito
# https://github.com/iagotito/dotfiles/tree/main/zsh
# Based on:

# Purification
# by Matthieu Cneude
# https://github.com/Phantas0s/purification

# Which was based on:

# Purity
# by Kevin Lanni
# https://github.com/therealklanni/purity
# MIT License

setopt prompt_subst

precmd_functions+=(build_prompt)

# backgroud color: #1c1c1c

GIT_PROMPT_PREFIX=" %F{202}λ:%f%F{#a97f7c}" # OrangeRed1 and Blue1 256 color code
GIT_PROMPT_SUFFIX="%f"

GIT_PROMPT_DIRTY=""
GIT_PROMPT_CLEAN=""

GIT_PROMPT_ADDED="%F{green}+%f "
GIT_PROMPT_MODIFIED="%F{208}!%f " # DarkOrange 256 color code
GIT_PROMPT_DELETED="%F{red}x%f "
GIT_PROMPT_RENAMED="%F{magenta}➜%f "
GIT_PROMPT_UNMERGED="%F{yellow}═%f "
GIT_PROMPT_UNTRACKED="%F{red}-%f "
GIT_PROMPT_STASHED="%B%F{red}S%f%b "
GIT_PROMPT_BEHIND="%B%F{red}↓%f%b "
GIT_PROMPT_AHEAD="%B%F{green}↑%f%b "

build_prompt() {
    VENV_INFO=$(get_virtual_env_info)
    PROMPT_INFO=$(print -P "$VENV_INFO%F{10}%~%f")
    GIT_INFO=$(print -P $(get_git_info))

    PAD=$(get_pad $PROMPT_INFO $GIT_INFO)
    if [[ $PAD -le 0 ]]; then
        PROMPT_INFO=$(print -P '$venv%F{10}.../%1d%f')
        PAD=$(get_pad $PROMPT_INFO $GIT_INFO)
    fi

    GIT_INFO=$(printf "%${PAD}s%s" "" "$GIT_INFO")

    PROMPT=$(echo "$PROMPT_INFO$GIT_INFO\n%B%F{blue}>%f%b ")
}

# TODO to refactor with switch / using someting else than grep
# Might be faster using ripgrep too
get_git_info() {
    # If not inside a git repository, return
    [[ -z "$(git rev-parse --is-inside-work-tree 2> /dev/null)" ]] && return 0

    CURRENT_BRANCH_NAME=$(git branch --show-current 2> /dev/null)
    BRANCH_INFO="$GIT_PROMPT_PREFIX$CURRENT_BRANCH_NAME$GIT_PROMPT_SUFFIX"

    INDEX=$(command git status --porcelain -b 2> /dev/null)

    STATUS=""

    if [[ ! -z $(echo "$INDEX" | command grep -E '^\?\? ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_UNTRACKED$STATUS"
    fi

    if [[ ! -z $(echo "$INDEX" | grep '^A  ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_ADDED$STATUS"
    elif [[ ! -z $(echo "$INDEX" | grep '^M  ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_ADDED$STATUS"
    elif [[ ! -z $(echo "$INDEX" | grep '^MM ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_ADDED$STATUS"
    fi

    if [[ ! -z $(echo "$INDEX" | grep '^ M ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_MODIFIED$STATUS"
    elif [[ ! -z $(echo "$INDEX" | grep '^AM ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_MODIFIED$STATUS"
    elif [[ ! -z $(echo "$INDEX" | grep '^MM ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_MODIFIED$STATUS"
    elif [[ ! -z $(echo "$INDEX" | grep '^ T ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_MODIFIED$STATUS"
    fi

    if [[ ! -z $(echo "$INDEX" | grep '^R  ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_RENAMED$STATUS"
    fi

    if [[ ! -z $(echo "$INDEX" | grep '^ D ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_DELETED$STATUS"
    elif [[ ! -z $(echo "$INDEX" | grep '^D  ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_DELETED$STATUS"
    elif [[ ! -z $(echo "$INDEX" | grep '^AD ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_DELETED$STATUS"
    fi

    if [[ ! -z $(command git rev-parse --verify refs/stash >/dev/null 2>&1) ]]; then
        STATUS="$GIT_PROMPT_STASHED$STATUS"
    fi

    if [[ ! -z $(echo "$INDEX" | grep '^UU ' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_UNMERGED$STATUS"
    fi

    if [[ ! -z $(echo "$INDEX" | grep '^## [^ ]\+ .*ahead' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_AHEAD$STATUS"
    fi

    if [[ ! -z $(echo "$INDEX" | grep '^## [^ ]\+ .*behind' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_BEHIND$STATUS"
    fi

    if [[ ! -z $(echo "$INDEX" | grep '^## [^ ]\+ .*diverged' 2> /dev/null) ]]; then
        STATUS="$GIT_PROMPT_DIVERGED$STATUS"
    fi

    if [[ ! -z $STATUS ]]; then
        STATUS=$(echo " %f[ $STATUS ]")
    fi

    echo "$BRANCH_INFO$STATUS"
}

get_virtual_env_info() {
    VENV=${VIRTUAL_ENV##*/}
    if [[ $VENV ]]; then
        VENV="%F{51}($VENV)%f "
    fi
    echo $VENV
}

get_pad() {
    # see: https://www.commandlinefu.com/commands/view/3956/remove-color-codes-special-characters-with-sed
    PLAIN_LINE=$(echo $1 | sed -r "s,\x1B\[[0-9;]*[a-zA-Z],,g")
    PLAIN_GIT_INFO=$(echo $2 | sed -r "s,\x1B\[[0-9;]*[a-zA-Z],,g")
    let PAD=$COLUMNS-${#PLAIN_LINE}-${#PLAIN_GIT_INFO}
    echo $PAD
}
