#!/usr/bin/zsh

# copy file content to clipboard
copy() {
    cat $1 | xclip -selection clipboard
}

cim() { cd $1 && nvim . && cd .. }

lrun() { ssh -R 80:localhost:$1 localhost.run }

l() {
   tmux split-window -h
   tmux resize-pane -R 19
}

cs() {
    echo '#!/usr/bin/bash' > $1
    chmod +x $1
}

alias re="tmux resize-pane -R 19"

sv() {
    cp solutions-carmem/$1/top.sv .
    make
}

ver() {
    cp top.sv ../..
    cd ../..
    make
    popd
}

j() {
    JAVA_FILE=$1
    javac $JAVA_FILE
    JAVA_CLASS=$(echo $JAVA_FILE | cut -d . -f1)
    java $JAVA_CLASS
    rm "$JAVA_CLASS.class"
}

wf() {
    while true; do
        clear
        if [ ! -z "$1" ]; then
            ls | grep $1
        else
            tree -L 3
        fi
        sleep 1
    done
}


# Update a version of python module in the setup.py file
ups() {
    FILE="setup.py"

    line=$(cat $FILE | grep version)
    version=$(echo "$line" | cut -d"'" -f 2)

    devversion=$(echo $version | cut -d'v' -f 2)
    updateddevversion=$(echo `expr $devversion + 1`)

    updatedversion=$(echo $version | sed "s/dev[0-9]*/dev$updateddevversion/")

    newsetup=$(cat $FILE | sed "s/$version/$updatedversion/")
    echo $newsetup > $FILE
}

# git

gitignore() {
    if [[ -z $@ ]]; then
        echo "Nothing to ignore."
        return
    fi
    ignore=$(echo $@ | sed 's/ /,/g')
    gitignore_content=$(curl -s "https://www.toptal.com/developers/gitignore/api/$ignore")
    echo $gitignore_content > .gitignore
}

repo_description() {
    if [[ ! -f README.md ]]; then
        echo "No README.md file found."
        return
    fi
    description=$(awk -v RS= -v p="2" 'NR == p' README.md)
    echo $description
}

ghcurl() {
    curl -H "Authorization: bearer $(cat ~/github-key)" -X POST -d " \
     { \
       \"query\": \"query { viewer { login }}\" \
     } \
    " https://api.github.com/graphql
}
